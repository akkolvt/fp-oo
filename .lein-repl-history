(empty? [])
(drop 1 [1 2 3 4])
(rest [1 2 3 4])
(first [1 2 3 4])
(def recursive-sum
  (fn [l so-far]
    (if (empty? l)
      so-far
      (recursive-sum (rest l) (+ so-far (first l))))))
(prn (recursive-sum [1 2 3 4] 0))
(prn (recursive-sum [1 2 3 4 5] 0))
(prn (recursive-sum [1 2 3 4 5] 1))
(def recursive-product
  (fn [l so-far]
    (if (empty? l)
      so-far
      (recursive-product (rest l) (* so-far (first l))))))
(prn (recursive-product [1 2 3 4] 1))
(prn (recursive-product [1 2 3 4 5] 1))
(def recursive-operation
  (fn [opl so-far]
    (if (empty? l)
      so-far
      (recursive-operation (rest l) (apply op so-far (first l))))))
(prn (recursive-operation [1 2 3 4] 0))
(prn (recursive-operation [1 2 3 4] 1))
(def recursive-operation
  (fn [op l so-far]
    (if (empty? l)
      so-far
      (recursive-operation (rest l) (apply op so-far (first l))))))
(prn (recursive-operation [1 2 3 4] 0))
(prn (recursive-operation [1 2 3 4] 1))
(def recursive-operation
  (fn [op l so-far]
    (if (empty? l)
      so-far
      (recursive-operation (rest l) (apply op so-far (first l))))))
(prn (recursive-operation + [1 2 3 4] 0))
(prn (recursive-operation * [1 2 3 4] 1))
(partial (apply * 1 2))
(apply * 1 2)
(def recursive-operation
  (fn [op l so-far]
    (if (empty? l)
      so-far
      (recursive-operation (rest l) (apply op (list so-far (first l)))))))
(prn (recursive-operation + [1 2 3 4] 0))
(prn (recursive-operation * [1 2 3 4] 1))
(def recursive-operation
  (fn [op l so-far]
    (if (empty? l)
      so-far
      (recursive-operation op (rest l) (apply op (list so-far (first l)))))))
(prn (recursive-operation + [1 2 3 4] 0))
(prn (recursive-operation * [1 2 3 4] 1))
(prn (recursive-operation + [1 2 3 4 5] 0))
(prn (recursive-operation * [1 2 3 4 5] 0))
(prn (recursive-operation * [1 2 3 4 5] 1))
exit
(assoc :a 0)
(assoc :a 0 so-far)
(assoc :a 0 {})
(assoc {} 0)
(assoc {} :a 0)
(recursive-function (fn [el so-far] (assoc so-far el 0))
                      [:a :b :c]
                      {})
(def recursive-function
     (fn [combiner something so-far]
       (if (empty? something)
         so-far
         (recursive-function combiner
                             (rest something)
                             (combiner (first something)
                                       so-far)))))
(recursive-function (fn [el so-far] (assoc so-far el 0))
                      [:a :b :c]
                      {})
(count {})
(recursive-function (fn [el so-far] (assoc so-far el (count so-far)))
                    [:a :b :c]
                    {})
(reverse (recursive-function (fn [el so-far] (assoc so-far el (count so-far)))
                    [:a :b :c]
                    {}))
exit
